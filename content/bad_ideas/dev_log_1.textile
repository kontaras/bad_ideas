###. bi.title Bad Ideas Dev Log, Part 1: Getting Started
###. bi.tag bad_ideas
###. bi.tag dev_log
###. bi.date 2022-10-15
###. bi.mod 2023-09-03


h2. Motivations

p. I have wanted to play around with using GitHub actions to gerate static web sites for quite a while, but never had a good place for it.
 Starting a blog, even if I don't think I will be adding regular content, offers me a chance to satiate my curiosity.

h3. Why did I choose Textile?

p. I wanted to use a markup language to what I would not be writing a lot of raw HTML.
 Since I wanted to write the project in Python, there would have to be a Python library available for it.
 Markdown was the obvious choice, but I am already using it for my "LabBook":https://github.com/kontaras/LabBook.
 Looking around, I came across a few and "Textile":https://textile-lang.com/ looked like a good candidate.
 I noticed that it had a very desirable feature: "comments":https://textile-lang.com/doc/textile-comments.
 I planned to make use of comments to inject metadata into the files without having to strip it out before passing them into the engine.

h2. The first prototype

h3. Generating files

"Full code":https://github.com/kontaras/bad_ideas/blob/8bed11ac577173293946aa133e1d5c214a8c2b4b/main.py

To render all of the pages, I needed to iterate over all of the pages and run them through the renderer:

bc. for root, _, files in os.walk(inFolder):
   relRoot = os.path.relpath(root, inFolder)
   for fileName in files:
      inPath = os.path.join(root, fileName)
      inFileRoot, _ = os.path.splitext(fileName)
      outPath = os.path.join(outFolder, relRoot, inFileRoot) + outFileExt
      render(inPath, outPath)

For now, the renderer is just running the files through a textile.
 In the future, it can be expanded to inject more content into pages:

bc. def render(inFile, outFile):
   with open(inFile, "r") as inStream, open(outFile, "w") as outStream:
      outStream.write(textile.textile(inStream.read()))

h3. Building and deploying a sites

"Full code":https://github.com/kontaras/bad_ideas/blob/238a3045fdd0559d584136a9252fef8694151d74/.github/workflows/generate_pages.yml

With most of the logic already in the generation script, the publishing script is simply plumbing to take the right files in an put them in the right place.

The script is run on each commit to the main branch:

bc. on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]

It then pulls the files from git:

bc. - uses: actions/checkout@v2
with:
   persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal token
   fetch-depth: 0 # otherwise, you will failed to push refs to dest repo

And runs them through the render script:

bc. run: |
   python -m pip install -r requirements.txt
   python main.py

Finally, the pages are checked into a new branch, @github_pages@:

bc. - name: Commit files
run: |
   git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
   git config --local user.name "github-actions[bot]"
   git add -f docs
   git commit -m "Rendered new pages" -a
- name: Push changes
uses: ad-m/github-push-action@master
with:
   github_token: ${{ secrets.GITHUB_TOKEN }}
   branch: github_pages
   force: true

That branch is configured to be publicly viewable using Github Pages:

!{width: 100%}../../media/bad_ideas/dev_log_1/github_pages.png(GitHub Pages configuration)!:../../media/bad_ideas/dev_log_1/github_pages.png
